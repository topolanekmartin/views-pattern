{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sRAQaA,EAAe,Q,2LAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,iBADR,iBAGA,qNAEA,oKAEA,kBACE,GAAM,eADR,eAGA,kBACE,GAAM,SADR,SAGA,wLAEA,kBACE,GAAM,cADR,cAGA,+PAGA,2IAEA,kBACE,GAAM,SADR,SAGA,wIAEA,kBACE,GAAM,oBADR,oBAGA,uBAAK,oBAAMC,WAAW,OAAjB,ydAsBL,oEAAmD,0BAAYA,WAAW,KAAvB,cAAnD,KAA+G,0BAAYA,WAAW,KAAvB,SAA/G,QAAyK,0BAAYA,WAAW,KAAvB,SAAzK,oI,yLAMJJ,EAAWK,gBAAiB","file":"component---readme-md-d9ff5a494fbac4511913.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/views-pattern/views-pattern/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"views-pattern\"\n    }}>{`Views pattern`}</h1>\n    <p>{`This project serves as demonstration of views (also known as components/hooks/views) pattern using React and Typescript. For this pattern\nthere exist following component folder structure.`}</p>\n    <p>{`Main goal of this pattern is divide UI and logic of each individual component. The main benefit\nof this pattern is a reusable UI or logic.`}</p>\n    <h2 {...{\n      \"id\": \"definitions\"\n    }}>{`Definitions`}</h2>\n    <h3 {...{\n      \"id\": \"views\"\n    }}>{`Views`}</h3>\n    <p>{`First of all, let's define component view. The component view can be seen as a component layout.\nThe layout is made up of common, styled or shared components.`}</p>\n    <h3 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h3>\n    <p>{`A shared component can be thought of as a subcomponent of a component. We create a shared\ncomponent when there is a repeating element across multiple views of the same component.\nThis avoids duplication of code (DRY principle). `}</p>\n    <p>{`Styled component is created only for a given view. It can extend an HTML element,\na common or a shared component.`}</p>\n    <h3 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h3>\n    <p>{`In this pattern every view has a custom hook. The hook contains specific logic related only\nfor concrete view.`}</p>\n    <h2 {...{\n      \"id\": \"folder-structure\"\n    }}>{`Folder structure`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`ComponentName\n├───components\n├───hooks\n│   │   useComponentName.ts\n│   │   useComponentNameOtherView.ts\n├───views\n│   ├───Default\n│   │   ├───styles\n│   │   |   |   Default.style.ts\n│   │   |   |   index.ts\n│   │   |   Default.tsx\n│   │   |   index.ts\n│   ├───OtherView\n│   │   ├───styles\n│   │   |   |   OtherView.style.ts\n│   │   |   |   index.ts\n│   │   |   OtherView.tsx\n│   │   |   index.ts\n│   ComponentName.ts\n│   OtherView.ts\n│   index.ts\n`}</code></pre>\n    <p>{`As you can see, there exists 3 base folders `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`views`}</inlineCode>{`. In addition, you may have also\nnoticed that folder and file names are kept as short as possible for better readability.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}